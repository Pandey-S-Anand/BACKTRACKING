/*
 * Subarray:
 * 1: Contiguous
 * 2: Order of appearence is maintained
 * 3: Every subarray is a subset.
 * 4: Every subarray is a subsequence
 * 5:For an array/string of size n, we can have ( (n*(n+1))/2 + 1 ) Subarray in
 * total i.e (n*(n+1))/2 non-empty subarray + 1 Empty subarray.
 * 
 * Subsequence:
 * 1: May or may not be contiguous
 * 2: Order of appearence is maintained.
 * 3: Derived by deleting some or none of the elements of the sequence without
 * changing the order of
 * the remaining elements.
 * 4: Every subsequence is subset.
 * 5: For a sequence/array/string of size n, we can have 2^n Subsequence in
 * total i.e ((2^n)-1) non-empty sub-sequences + 1 Empty Subsequence.
 * 
 * Subset:
 * 1 : May or maynot be contiguous
 * 2: Order of appearence may or may not be maintained.
 * 3: Subsets and subsequence ae exactly same thing the only difference between
 * them is that subsequence should maintain order of appearence of elements
 * while subsets don't need to preserve order of appearence of elements
 * for ex : {1,2} and {2,1} represent the same subset however while
 * writing/listing the subsets of the sets you can either write {1,2} or {2,1}
 * it doesnot matter but you can not list both at the same time
 * since they are exactly the same thing.
 * 
 * Ex: arr[]={1, 2, 3}
 * 
 * Subarrays :
 * 
 * [1]
 * [1,2]
 * [1, 2, 3]
 * [2]
 * [2,3]
 * [3]
 * 
 * 
 * Subsequences:
 * 
 * []
 * [1]
 * [1, 2]
 * [1, 3]
 * [1, 2, 3]
 * [2]
 * [2, 3]
 * [3]
 * 
 * Subsets:
 * 
 * []
 * [1]
 * [1, 2] or [2, 1]
 * [1, 3] or [3, 1]
 * [1, 2, 3] or [1, 3, 2] or [2, 3, 1] or [2, 1, 3] or [3, 1, 2] or [3, 2, 1]
 * [2]
 * [2, 3] or [3, 2]
 * [3]
 */

//Iterative Approach

//Method 1 :

/*
For arr[] = {1, 2, 3}:

Intially:  subsets :[[]].  (Add an empty subset)

Iteration 1: (arr[0]=1)
Pair 1 with all existing subsets i.e [1]
subsets: [[],[1]]

Iteration 2: (arr[1]=2)
Pair 2 with all existing subsets i.e  [2] and [1, 2]  
subsets: [[], [1], [2], [1, 2]].

Iteration 3: (arr[2]=3)
Pair 3 with all existing subsets i.e [3], [1, 3] , [2, 3] and [1, 2, 3]
subsets: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]].
*/

class Solution {
    public List<List<Integer>> subsets(int[] arr) {
        List<List<Integer>> subsets = new ArrayList<>();
        subsets.add(new ArrayList<>()); // Start with the empty subset

        for (int val : arr) {
            int size = subsets.size();
            for (int i = 0; i < size; i++) {
                // Create a new subset from the existing subsets by adding the current number to it
                List<Integer> currentSubset = new ArrayList<>(subsets.get(i));
                currentSubset.add(val);
                subsets.add(currentSubset);
            }
        }

        return subsets;
    }
}



// Method 2 : Bit Manipulation

/*
 * For example : arr[] = {1, 2, 3, 4}; there are 16 (i.e 2^4) sub-sequences.
 * If we carefully notice it is nothing but binary numbers from 0 to 15 which
 * can be shown as below:
 * 
 * 0000 {}
 * 
 * 0001 {1}
 * 
 * 0010 {2}
 * 
 * 0011 {1, 2}
 * 
 * 0100 {3}
 * 
 * 0101 {1, 3}
 * 
 * 0110 {2, 3}
 * 
 * 0111 {1, 2, 3}
 * 
 * 1000 {4}
 * 
 * 1001 {1, 4}
 * 
 * 1010 {1, 4}
 * 
 * 1011 {1, 2, 4}
 * 
 * 1100 {3, 4}
 * 
 * 1101 {1, 3, 4}
 * 
 * 1110 {2, 3, 4}
 * 
 * 1111 {1, 2, 3, 4}
 * 
 * 
 * Starting from right,whenever we encounter set bit(1) in a number at ith
 * position the we print the element present at (i-1)th index in the array.
 */

class Solution {
    public List<List<Integer>> subsets(int[] arr) {
        // This list will hold all the generated subsets
        List<List<Integer>> subsets = new ArrayList<>();

        // Total number of subsets = 2^n (where n is the length of the input array)
        int totalSubsets = 1 << arr.length; // Equivalent to 2^arr.length

        // Loop through all possible binary representations from 0 to 2^n - 1
        for (int num = 0; num < totalSubsets; num++) {
            // This list will hold the current subset based on bits set in 'num'
            List<Integer> subset = new ArrayList<>();

            // Check each bit of 'num'
            for (int i = 0; i < arr.length; i++) {
                // If the i-th bit is set in 'num', include arr[i] in current subset
                if ((num & (1 << i)) != 0) {
                    subset.add(arr[i]);
                }
            }

            // Add the generated subset to the result list
            subsets.add(subset);
        }

        return subsets;
    }
}



// Recursive Approach

/*
Ex : arr[]={1, 2, 3, 4}

   []
   |(index=0)
   ├── [1] //Include 1
   |   |(index=1)
   │   ├── [1, 2] //Include 2
   |   |   |(index=2)
   │   │   ├── [1, 2, 3] //Include 3
   |   |   |   |(index=3)
   │   │   │   ├── [1, 2, 3, 4] //Include 4
   |   |   |   |
   │   │   │   └── [1, 2, 3] //Exclude 4
   |   |   |  
   │   │   └── [1, 2] //Exclude 3
   |   |       |(index=3)
   │   │       ├── [1, 2, 4] //Include 4
   |   |       |
   │   │       └── [1, 2] //Exclude 4
   |   |
   |   |
   │   └── [1] //Exclude 2
   |       |(index=2)
   │       ├── [1, 3] //Include 3
   |       |   |(index=3)
   │       │   ├── [1, 3, 4] //Include 4
   |       |   |
   │       │   └── [1, 3] //Exclude 4
   |       |
   │       └── [1] //Exclude 3
   |           |(index=3)
   │           ├── [1, 4] //Include 4
   |           |
   |           └── [1] //Exclude 4
   |
   └── [] //Exclude 1
       |(index=1)
       ├── [2] //Include 2
       |   |(index=2)
       │   ├── [2, 3] //Include 3
       |   |   |(index=3)
       │   │   ├── [2, 3, 4] //Include 4
       |   |   |
       │   │   └── [2, 3] //Exclude 4
       |   |
       │   └── [2] //Exclude 3
       |       |(index=3)
       │       ├── [2, 4] //Include 4
       |       |
       │       └── [2] //Exclude 4
       |
       └── [] //Exclude 2
           |(index=2)
           ├── [3] //Include 3
           |   |(index=3)
           │   ├── [3, 4] //Include 4
           |   |
           │   └── [3] //Exclude 4
           |
           └── [] //Exclude 3
               |(index=3)
               ├── [4] //Include 4
               |
               └── [] //Exclude 4
 */

//Method 1

class Solution {
    private List<List<Integer>> subsets;

    public List<List<Integer>> subsets(int[] arr) {
        subsets = new ArrayList<>();
        generateSubsets(arr, 0, new ArrayList<>());
        return subsets;
    }

    private void generateSubsets(int[] arr, int index, List<Integer> currentSubset) {
        /*
         * When index equals arr.length, it means we have processed all elements of the
         * array for the current subset. Thus, we add the current subset to subsets.
         */
        if (index == arr.length) {
            subsets.add(new ArrayList<>(currentSubset)); // Adds a copy of subset (to prevent reference issues) to subsets.
            return;
        }
        // current element (arr[index]) is added to the subset
        currentSubset.add(arr[index]);
        // explore the path where the current element is included
        generateSubsets(arr, index + 1, currentSubset);
        /*
         * Backtracking :After exploring the path where the current element is included,
         * the element is removed from the subset. It reverts the state of subset to
         * what it was before the current element was added, allowing the exploration
         * of the path where the current element is excluded.
         */
        currentSubset.remove(currentSubset.size() - 1);
        // explore the path where the current element is excluded
        generateSubsets(arr, index + 1, currentSubset);
    }
}


//Method 2
/*
(index=0) []
|
|-- i=0 -> add 1 -> [1]
|   |
|   |-- (index=1)
|   |   |
|   |   |-- i=1 -> add 2 -> [1, 2]
|   |   |   |
|   |   |   |-- (index=2)
|   |   |   |   |
|   |   |   |   |-- i=2 -> add 3 -> [1, 2, 3] ✅
|   |   |   |   |   └── backtrack -> remove 3 -> [1, 2]
|   |   |   |   └── loop ends (i=2)
|   |   |   └── backtrack -> remove 2 -> [1]
|   |   |
|   |   |-- i=2 -> add 3 -> [1, 3] ✅
|   |   |   └── backtrack -> remove 3 -> [1]
|   |   └── loop ends (i=2)
|   └── backtrack -> remove 1 -> []
|
|-- i=1 -> add 2 -> [2]
|   |
|   |-- (index=2)
|   |   |
|   |   |-- i=2 -> add 3 -> [2, 3] ✅
|   |   |   └── backtrack -> remove 3 -> [2]
|   |   └── loop ends (i=2)
|   └── backtrack -> remove 2 -> []
|
|-- i=2 -> add 3 -> [3] ✅
|   └── backtrack -> remove 3 -> []
└── loop ends (i=2)
*/

class Solution {
    // Global list to store all subsets
    private List<List<Integer>> subsets;

    public List<List<Integer>> subsets(int[] arr) {
        // Initialize the result list
        subsets = new ArrayList<>();

        // Start recursive generation from index 0 with an empty subset
        generateSubsets(arr, 0, new ArrayList<>());

        // Return the final list of subsets
        return subsets;
    }

    private void generateSubsets(int[] arr, int index, List<Integer> currentSubset) {
        // Step 1: Add the current subset (copy) to the result list
        subsets.add(new ArrayList<>(currentSubset));

        // Step 2: Try adding each remaining element to the current subset
        for (int i = index; i < arr.length; i++) {
            // Choose: Include arr[i] in the current subset
            currentSubset.add(arr[i]);

            // Explore: Recursively generate subsets including arr[i]
            generateSubsets(arr, i + 1, currentSubset);

            // (backtrack): Remove the last added element before the next iteration
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}
