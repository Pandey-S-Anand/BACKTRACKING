//Method 1

class Solution {
    private List<List<Integer>> targetSumCombinations;

    public List<List<Integer>> combinationSum(int[] arr, int targetSum) {
        targetSumCombinations = new ArrayList<>();
        findCombinationsWithSumk(arr, 0, targetSum, new ArrayList<>());
        return targetSumCombinations;
    }

    private void findCombinationsWithSumk(int[] arr, int index, int targetSum, List<Integer> combination) {
        // Base case: If targetSum becomes 0, we found a valid combination
        if (targetSum == 0) {
            targetSumCombinations.add(new ArrayList<>(combination));
            return;
        }

        // If index exceeds array length, we can't form further combinations
        if (index == arr.length) {
            return;
        }

        // Include the current element if it's not larger than remaining targetSum
        if (targetSum >= arr[index]) {
            combination.add(arr[index]);
            // Stay at same index since elements can be reused (unlimited times)
            findCombinationsWithSumk(arr, index, targetSum - arr[index], combination);
            // Backtrack by removing last element added
            combination.remove(combination.size() - 1);
        }

        findCombinationsWithSumk(arr, index + 1, targetSum, combination);
    }
}


//Method 2

class Solution {
    private List<List<Integer>> targetSumCombinations;

    public List<List<Integer>> combinationSum(int[] arr, int targetSum) {
        targetSumCombinations = new ArrayList<>();
        findCombinationsWithSumk(arr, 0, targetSum, new ArrayList<>());
        return targetSumCombinations;
    }

    private void findCombinationsWithSumk(int[] arr, int index, int targetSum, List<Integer> combination) {
        // Base case: If targetSum becomes 0, we found a valid combination
        if (targetSum == 0) {
            targetSumCombinations.add(new ArrayList<>(combination));
            return;
        }

        for (int i = index; i < arr.length; i++) {
            // Include the current element if it's not larger than remaining targetSum
            if (targetSum >= arr[i]) {
                combination.add(arr[i]);
                // Stay at same index since elements can be reused (unlimited times)
                findCombinationsWithSumk(arr, i, targetSum - arr[i], combination);
                // Backtrack by removing last element added
                combination.remove(combination.size() - 1);
            }
        }
    }
}
