//Recursive Approach

//Method 1

class Solution {
    private List<List<Integer>> targetSumcombinations;

    public List<List<Integer>> combinationSum(int[] arr, int targetSum) {
        targetSumcombinations = new ArrayList<>();
        findCombinationsWithSumk(arr, 0, targetSum, new ArrayList<>());
        return targetSumcombinations;
    }

    private void findCombinationsWithSumk(int[] arr, int index, int targetSum, List<Integer> currentCombination) {
        if (targetSum == 0) {
            targetSumcombinations.add(new ArrayList<>(currentCombination));
            return;
        }

        if (index == arr.length) {
            return;
        }

        currentCombination.add(arr[index]);
        if (targetSum >= arr[index]) {
            findCombinationsWithSumk(arr, index, targetSum - arr[index], currentCombination);
        }
        currentCombination.remove(currentCombination.size() - 1);
        findCombinationsWithSumk(arr, index + 1, targetSum, currentCombination);
    }
}


//Method 2

class Solution {
    private List<List<Integer>> targetSumcombinations;

    public List<List<Integer>> combinationSum(int[] arr, int targetSum) {
        targetSumcombinations = new ArrayList<>();
        findCombinationsWithSumk(arr, 0, targetSum, new ArrayList<>());
        return targetSumcombinations;
    }

    private void findCombinationsWithSumk(int[] arr, int index, int targetSum, List<Integer> currentCombination) {
        if (targetSum == 0) {
            targetSumcombinations.add(new ArrayList<>(currentCombination));
            return;
        }

        for (int i = index; i < arr.length; i++) {
            currentCombination.add(arr[i]);
            if (targetSum >= arr[i]) {
                findCombinationsWithSumk(arr, i, targetSum - arr[i], currentCombination);
            }
            currentCombination.remove(currentCombination.size() - 1);
        }
    }
}
