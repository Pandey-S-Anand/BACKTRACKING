//Method 1

class Solution {
    private List<List<Integer>> targetSumUniqueCombinations;

    public List<List<Integer>> combinationSum2(int[] arr, int targetSum) {
        targetSumUniqueCombinations = new ArrayList<>();
        /* Sort the array to:
           1. Group duplicates together for easy skipping
           2. Enable early termination when arr[i] > targetSum
        */
        Arrays.sort(arr);
        findUniqueCombinationsWithTargetSum(arr, 0, targetSum, new ArrayList<>());
        return targetSumUniqueCombinations;
    }

    private void findUniqueCombinationsWithTargetSum(int[] arr, int index, int targetSum, List<Integer> combination) {
        // Base case: If targetSum becomes 0, we found a valid combination
        if (targetSum == 0) {
            targetSumUniqueCombinations.add(new ArrayList<>(combination));
            return;
        }

        /*
         * Base Cases and Early Termination Logic:
         * 
         * 1. If the current index exceeds the array length:
         *    - We cannot form any more combinations from this point, so we return.
         *
         * 2. Early Termination Optimization:
         *    - The input array is sorted and contains only positive integers.
         *    - If the current element is greater than the remaining target sum,
         *      all the elements ahead will also be greater.
         *    - Hence, we can skip the remaining elements to avoid unnecessary recursion.
         */
        if (index == arr.length || arr[index] > targetSum) {
            return;
        }

        // Include the current element (arr[index]) in the combination
        combination.add(arr[index]);

        // Recurse with reduced target and move to the next index (elements can't be reused)
        findUniqueCombinationsWithTargetSum(arr, index + 1, targetSum - arr[index], combination);

        // Backtrack by removing the last element
        combination.remove(combination.size() - 1);

        // Skip all duplicates of the current element to prevent generating duplicate combinations
        int nextDistinctIndex = index + 1;
        while (nextDistinctIndex < arr.length && arr[index] == arr[nextDistinctIndex]) {
            nextDistinctIndex++;
        }

        // Recurse without including the current element (i.e., skip duplicates)
        findUniqueCombinationsWithTargetSum(arr, nextDistinctIndex, targetSum, combination);
    }
}


//Method 2

class Solution {
    private List<List<Integer>> targetSumUniqueCombinations;

    public List<List<Integer>> combinationSum2(int[] arr, int targetSum) {
        targetSumUniqueCombinations = new ArrayList<>();
        /* Sort the array to:
        1. Group duplicates together for easy skipping
        2. Enable early termination when arr[i] > targetSum
        */
        Arrays.sort(arr);
        findUniqueCombinationsWithTargetSum(arr, 0, targetSum, new ArrayList<>());
        return targetSumUniqueCombinations;
    }

    private void findUniqueCombinationsWithTargetSum(int[] arr, int index, int targetSum, List<Integer> combination) {
        // Base case: If targetSum becomes 0, we found a valid combination
        if (targetSum == 0) {
            targetSumUniqueCombinations.add(new ArrayList<>(combination));
            return;
        }

        for (int i = index; i < arr.length; i++) {
            // If arr[i] is the same as the previous element skip to avoid generating duplicate combinations.
            if (i > index && arr[i] == arr[i - 1]) {
                continue;
            }

            /*
             * Early Termination: Since the array is sorted and 
             * the current element is greater than the remaining target,
             * further elements will also be greater and can be skipped.
             */
            if (arr[i] > targetSum) {
                break;
            }
            combination.add(arr[i]);
            findUniqueCombinationsWithTargetSum(arr, i + 1, targetSum - arr[i], combination);
            combination.remove(combination.size() - 1);
        }
    }
}
