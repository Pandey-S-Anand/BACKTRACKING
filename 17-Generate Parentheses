//Bruteforce Approach

class Solution {
    // This list will store all the valid combinations of parentheses
    private List<String> validCombinations;

    public List<String> generateParenthesis(int n) {
        validCombinations = new ArrayList<>();

        // We use a character array of size 2*n to hold one potential combination
        generateAllValidCombinations(new char[2 * n], 0);

        return validCombinations;
    }

    private void generateAllValidCombinations(char[] currentCombination, int index) {
        // Base case: if we have placed 2*n characters
        if (index == currentCombination.length) {
            // Check if the generated combination is valid
            if (isValidCombination(currentCombination)) {
                validCombinations.add(new String(currentCombination)); // Convert char array to string
            }
            return;
        }

        // Try placing '(' at the current index
        currentCombination[index] = '(';
        generateAllValidCombinations(currentCombination, index + 1);

        // Try placing ')' at the current index (backtracking step)
        currentCombination[index] = ')';
        generateAllValidCombinations(currentCombination, index + 1);
    }

    private boolean isValidCombination(char[] combination) {
        int balance = 0;

        for (char ch : combination) {
            if (ch == '(') {
                balance++; // Increment balance for '('
            } else {
                balance--; // Decrement balance for ')'
            }

            // If at any point balance becomes negative, too many ')' have been placed
            if (balance < 0) {
                return false;
            }
        }

        // A valid combination must end with balance == 0
        return balance == 0;
    }
}


//Optimal Approach

class Solution {
    // List to store all the valid combinations of well-formed parentheses
    private List<String> validCombinations;

    public List<String> generateParenthesis(int n) {
        validCombinations = new ArrayList<>();

        // Use a char array of length 2*n to build combinations efficiently
        generateValidCombinations(new char[2 * n], 0, 0, 0, n);

        return validCombinations;
    }

    private void generateValidCombinations(char[] combination, int index, int openUsedSoFar, int closeUsedSoFar,
            int n) {
        /**
         * Pruning conditions:
         * - If ')' used so far is more than '(', it's invalid.
         * - If either '(' or ')' exceeds total allowed (n), it's invalid.
         */
        if (closeUsedSoFar > openUsedSoFar || openUsedSoFar > n || closeUsedSoFar > n) {
            return; // Stop exploring this path as it's invalid
        }

        // If the combination is of length 2*n and valid so far, add to result
        if (index == combination.length) {
            validCombinations.add(new String(combination)); // Convert char[] to String
            return;
        }

        // Option 1: Place an opening bracket '(' at current index
        combination[index] = '(';
        generateValidCombinations(combination, index + 1, openUsedSoFar + 1, closeUsedSoFar, n);

        // Option 2: Place a closing bracket ')' at current index
        combination[index] = ')';
        generateValidCombinations(combination, index + 1, openUsedSoFar, closeUsedSoFar + 1, n);
    }
}
