//Naive implementation

class Solution {
    // List to collect all valid sentences formed by breaking the input string
    private List<String> sentences;

    // Set to hold dictionary words for quick O(1) lookup
    private Set<String> dictionary;

    // Variables to store the minimum and maximum word lengths in the dictionary
    private int minWordLength;
    private int maxWordLength;

    public List<String> wordBreak(String str, List<String> wordDict) {
        dictionary = new HashSet<>(wordDict);
        sentences = new ArrayList<>();

        // Initialize word length bounds
        minWordLength = Integer.MAX_VALUE;
        maxWordLength = Integer.MIN_VALUE;

        // Determine the minimum and maximum lengths of words in the dictionary
        findSmallestAndLargestWordInDictionary(wordDict);

        // Start recursive sentence formation
        wordBreak(str, "");

        return sentences;
    }

    private void wordBreak(String str, String sentenceSoFar) {
        // Base case: if no more characters to process, save the complete sentence
        if (str.isEmpty()) {
            sentences.add(sentenceSoFar.trim()); // trim to remove leading space
            return;
        }

        StringBuilder prefix = new StringBuilder();

        // Try all possible prefixes starting from index 0
        for (int partition = 0; partition < str.length(); partition++) {
            prefix.append(str.charAt(partition));

            // Skip if prefix is smaller than any word in the dictionary
            if (prefix.length() < minWordLength) {
                continue;
            }

            // Stop exploring if prefix exceeds max word length in dictionary
            if (prefix.length() > maxWordLength) {
                break;
            }

            String currentPrefix = prefix.toString();
            // If prefix is a valid word, recursively continue with the remaining string
            if (dictionary.contains(currentPrefix)) {
                // Add a space before appending prefix to sentenceSoFar
                wordBreak(str.substring(partition + 1), sentenceSoFar + " " + currentPrefix);
            }
        }
    }

    private void findSmallestAndLargestWordInDictionary(List<String> wordDict) {
        int low = 0, high = wordDict.size() - 1;

        // Loop to efficiently compare word lengths from both ends of the list
        while (low <= high) {
            int len1 = wordDict.get(low).length();
            int len2 = wordDict.get(high).length();

            // Update min and max word lengths encountered so far
            minWordLength = Math.min(minWordLength, Math.min(len1, len2));
            maxWordLength = Math.max(maxWordLength, Math.max(len1, len2));

            low++;
            high--;
        }
    }
}


//Optimal implementation

class Solution {
    private List<String> sentences;
    private Set<String> dictionary;
    private int minWordLength;
    private int maxWordLength;

    public List<String> wordBreak(String str, List<String> wordDict) {
        dictionary = new HashSet<>(wordDict);
        sentences = new ArrayList<>();
        minWordLength = Integer.MAX_VALUE;
        maxWordLength = Integer.MIN_VALUE;

        findSmallestAndLargestWordInDictionary(wordDict);
        wordBreak(str, 0, new StringBuilder());

        return sentences;
    }

    private void wordBreak(String str, int start, StringBuilder sentenceSoFar) {
        if (start == str.length()) {
            sentences.add(sentenceSoFar.toString().trim());
            return;
        }

        StringBuilder prefix = new StringBuilder();

        for (int partition = start; partition < str.length(); partition++) {
            prefix.append(str.charAt(partition));

            if (prefix.length() < minWordLength) {
                continue;
            }

            if (prefix.length() > maxWordLength) {
                break;
            }

            String currentPrefix = prefix.toString();
            if (dictionary.contains(currentPrefix)) {
                int currentLength = sentenceSoFar.length();
                sentenceSoFar.append(" ").append(currentPrefix);
                wordBreak(str, partition + 1, sentenceSoFar);
                sentenceSoFar.setLength(currentLength);
            }
        }
    }

    private void findSmallestAndLargestWordInDictionary(List<String> wordDict) {
        int low = 0, high = wordDict.size() - 1;

        while (low <= high) {
            int len1 = wordDict.get(low).length();
            int len2 = wordDict.get(high).length();

            minWordLength = Math.min(minWordLength, Math.min(len1, len2));
            maxWordLength = Math.max(maxWordLength, Math.max(len1, len2));

            low++;
            high--;
        }
    }
}
