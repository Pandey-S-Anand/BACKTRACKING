/*

Note 1 :

When you consider subsets of an array of size ’n’, you're including combinations of all possible sizes (0 through n).

For example, for an array with n elements, the subsets can be considered as combinations of size 0 (the empty set), 1 (single elements), 2 (pairs of elements), and so on, up to size n (the full set).

Ex: arr[] = {1, 2, 3}

Subsets:
  []  
  [1] 
  [1, 2] or [2, 1] 
  [1, 3] or [3, 1] 
  [1, 2, 3] or [1, 3, 2] or [2, 3, 1] or [2, 1, 3] or [3, 1, 2] or [3, 2, 1]
  [2] 
  [2, 3] or [3, 2] 
  [3] 

Combinations of a specific size:
  Size 0 : []
  Size 1 :  [1], [2], [3] 
  Size 2 :  [1, 2] (or [2, 1]), [1, 3] (or [3, 1]), [2, 3] (or [3, 2])
  Size 3 :  [1, 2, 3] (or [1, 3, 2] or [2, 3, 1] or [2, 1, 3] or [3, 1, 2] or [3, 2, 1])

So every subset of an array can be viewed as a combination of a certain size (which can be 0 up to the total number of elements in the array).


Note 2 :

The term nCr refers to the number of combinations of n distinct objects taken r at a time. It is mathematically represented by the formula:

nCr = n! / (r!(n−r)!)

When discussing combinations of an array, the terms n and r in the context of nCr can be defined as follows:

- n: This represents the total number of distinct elements in the array.
- r: This represents the number of elements you want to select.

Example:

For the array arr[] = {1, 2, 3}:

a: Combinations of one element are:
- [1], [2], [3]

b: Combinations of two elements are:
- [1, 2] (or [2, 1]), [1, 3] (or [3, 1]), [2, 3] (or [3, 2])

c: Combinations of three elements are:
- [1, 2, 3] (or [1, 3, 2] or [2, 3, 1] or [2, 1, 3] or [3, 1, 2] or [3, 2, 1])

Additional Information:
- Unlike permutations, where the order matters, in combinations, different orders of the same items are counted as the same arrangements. 
For example, if you select 3 elements from the array {1, 2, 3}, the arrangements [1, 2, 3] or [1, 3, 2] or [2, 3, 1] or [2, 1, 3] or [3, 1, 2] or [3, 2, 1] are considered the same.
*/

//Iterative Approach

//Method 1

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        // Generate all subsets of size exactly k from numbers 1 to n
        return generateSizeKSubsets(n, k);
    }

    private List<List<Integer>> generateSizeKSubsets(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>(); // Stores only valid k-sized subsets
        List<List<Integer>> subsets = new ArrayList<>();
        subsets.add(new ArrayList<>()); // Start with the empty subset

        for (int num = 1; num <= n; num++) {
            int size = subsets.size();
            for (int i = 0; i < size; i++) {
                // Create a new subset from the existing subsets by adding the current number to it
                List<Integer> newSubset = new ArrayList<>(subsets.get(i));
                newSubset.add(num);

                if (newSubset.size() == k) { // If the subset has reached size k, add it to final result
                    sizeKSubsets.add(newSubset);
                }

                if (newSubset.size() < k) { // If the subset is still smaller than k, keep growing it,  We skip adding subsets larger than k
                    subsets.add(newSubset);
                }
            }
        }
        return sizeKSubsets;
    }
}


//Aliter

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        // Generate all subsets of size exactly k from numbers 1 to n
        return generateSizeKSubsets(n, k);
    }

    private List<List<Integer>> generateSizeKSubsets(int n, int k) {
        List<List<Integer>> subsets = new ArrayList<>();
        subsets.add(new ArrayList<>());

        // Iterate from 1 to n to build combinations
        for (int num = 1; num <= n; num++) {
            int existingSubsetsCount = subsets.size();

            for (int i = 0; i < existingSubsetsCount; i++) {
                List<Integer> newSubset = new ArrayList<>(subsets.get(i));
                newSubset.add(num);

                // Only add newSubset if its size is <= k (We skip adding subsets larger than k)
                if (newSubset.size() <= k) {
                    subsets.add(newSubset);
                }
            }
        }

        // Remove subsets that are smaller than size k
        Iterator<List<Integer>> iterator = subsets.iterator();
        while (iterator.hasNext()) {
            if (iterator.next().size() < k) {
                iterator.remove();
            }
        }

        return subsets; // Return only k-sized subsets
    }
}



//Method 2

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        return generateSizeKSubsets(n, k);
    }

    private List<List<Integer>> generateSizeKSubsets(int n, int k) {
        List<List<Integer>> sizeKSubsets = new ArrayList<>();
        int totalSubsets = 1 << n;

        for (int num = 0; num < totalSubsets; num++) {
            // Count the number of set bits (1s) in binary representation of num If exactly k bits are set, it means this combination has size k
            if (Integer.bitCount(num) == k) {
                List<Integer> subset = new ArrayList<>();

                // Check each bit position
                for (int i = 0; i < n; i++) {
                    // If the ith bit is set, include (i + 1) in the subset
                    if ((num & (1 << i)) != 0) {
                        subset.add(i + 1); // Because numbers are from 1 to n
                    }
                }

                sizeKSubsets.add(subset); // Add this valid size-k subset
            }
        }

        return sizeKSubsets;
    }
}


//Recursive Approach

//Method 1

class Solution {
    private List<List<Integer>> sizeKSubsets;

    public List<List<Integer>> combine(int n, int k) {
        sizeKSubsets = new ArrayList<>();
        generateSizeKSubsets(n, 1, k, new ArrayList<>());
        return sizeKSubsets;
    }

    public void generateSizeKSubsets(int maxNumber, int currentNumber, int targetSize, List<Integer> subset) {
        // If the subset has reached the required size, add it to the result list
        if (subset.size() == targetSize) {
            sizeKSubsets.add(new ArrayList<>(subset));
            return;
        }

        /* Pruning conditions:
         * 1. If the remaining numbers are insufficient to form a valid subset of size targetSize, stop. (Early exit)
         * 2. If the current number exceeds n, stop (out of range).
         */
        if (currentNumber > maxNumber || subset.size() + (maxNumber - currentNumber + 1) < targetSize) {
            return;
        }

        subset.add(currentNumber);
        generateSizeKSubsets(maxNumber, currentNumber + 1, targetSize, subset);
        subset.remove(subset.size() - 1);
        generateSizeKSubsets(maxNumber, currentNumber + 1, targetSize, subset);
    }
}

//Method 2

class Solution {
    private List<List<Integer>> sizeKSubsets;

    public List<List<Integer>> combine(int n, int k) {
        sizeKSubsets = new ArrayList<>();
        generateSubsetsOfSizeK(n, 1, new ArrayList<>(), k);
        return sizeKSubsets;
    }

    private void generateSubsetsOfSizeK(int maxNumber, int currentNumber, List<Integer> subset, int targetSize) {
        // If the subset has reached the required size, add it to the result list
        if (subset.size() == targetSize) {
            sizeKSubsets.add(new ArrayList<>(subset));
            return;
        }

        // If the remaining numbers are insufficient to form a valid subset of size targetSize, stop. (Early exit)
        if ((subset.size() + (maxNumber - currentNumber + 1)) < targetSize) {
            return;
        }

        for (int num = currentNumber; num <= maxNumber; num++) {
            subset.add(num);
            generateSubsetsOfSizeK(maxNumber, num + 1, subset, targetSize);
            subset.remove(subset.size() - 1);
        }
    }
}
