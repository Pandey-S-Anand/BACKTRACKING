/*
If a string contains duplicate characters and we try to generate the permutations of the string (i.e., permutations of all the characters in the string, where  n=r in nPr),
then duplicate permutations will be generated. To find the number of distinct permutations of a string containing duplicate characters, we use the following formula:

Number of distinct permutations of a string (containing duplicate characters) = n! / (k1! × k2! × … × km!)

Where:

n is the total number of characters in the string.
k1, k2, …, km are the frequencies (counts) of each unique character in the string.

Explanation:
The total number of permutations of a string with n characters is n!.
If some characters are repeated, the repeated permutations are counted multiple times in n!. To account for this, we divide by the factorial of the frequency of each repeated character to avoid over-counting.

Example:
For the string "AAB", the distinct permutations would be calculated as follows:

Total number of characters n = 3 (A appears 2 times, B appears 1 time).
The formula becomes:
Number of distinct permutations = 3! / (2! × 1!)

Calculating the factorials:
3! = 6, 2! = 2, 1! = 1

Plugging in the values:
Number of distinct permutations = 6 / (2 × 1) = 3

The distinct permutations of "AAB" are: "AAB", "ABA", and "BAA".
*/



//Method 1

//Naive Implementation

class Solution {
    // Set to store all unique generated permutations
    private Set<String> uniquePermutations;

    public ArrayList<String> findPermutation(String str) {
        uniquePermutations = new HashSet<>();
        findUniquePermutations(str, new StringBuilder(), new boolean[str.length()]);
        // Convert set to list before returning
        return new ArrayList<>(uniquePermutations);
    }

    private void findUniquePermutations(String str, StringBuilder permutation, boolean[] visited) {
        if (permutation.length() == str.length()) {
            uniquePermutations.add(permutation.toString());
            return;
        }

        for (int i = 0; i < str.length(); i++) {
            if (!visited[i]) {
                used[str.charAt(i)] = true;
                visited[i] = true;
                permutation.append(str.charAt(i));
                findUniquePermutations(str, permutation, visited);
                permutation.setLength(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }
}


//Better Implementation

class Solution {
    private ArrayList<String> uniquePermutations;

    public ArrayList<String> findPermutation(String str) {
        uniquePermutations = new ArrayList<>();
        findUniquePermutations(str, new StringBuilder(), new boolean[str.length()]);
        return uniquePermutations;
    }

    private void findUniquePermutations(String str, StringBuilder permutation, boolean[] visited) {
        if (permutation.length() == str.length()) {
            uniquePermutations.add(permutation.toString());
            return;
        }

        // To keep track of elements used at the current level of recursion
        boolean[] used = new boolean[128];

        for (int i = 0; i < str.length(); i++) {
            if (used[str.charAt(i)]) {
                continue;
            }

            if (!visited[i]) {
                used[str.charAt(i)] = true;
                visited[i] = true;
                permutation.append(str.charAt(i));
                findUniquePermutations(str, permutation, visited);
                permutation.setLength(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }
}


//Optimal Implementation

class Solution {
    private ArrayList<String> uniquePermutations;

    public ArrayList<String> findPermutation(String str) {
        uniquePermutations = new ArrayList<>();
        char[] arr = str.toCharArray();
        Arrays.sort(arr); // Sorting helps in detecting duplicates
        findUniquePermutations(arr, new StringBuilder(), new boolean[str.length()]);
        return uniquePermutations;
    }

    private void findUniquePermutations(char[] arr, StringBuilder permutation, boolean[] visited) {
        if (permutation.length() == arr.length) {
            uniquePermutations.add(permutation.toString());
            return;
        }


        for (int i = 0; i < arr.length; i++) {
            /*
             * Why are we exactly using !visited[i - 1]?
             * 
             * 1: To avoid generating duplicate permutations, we need to ensure that we do
             * not include the same element multiple times at the same level of recursion.
             * 2: If arr[i] is the same as arr[i - 1] (i.e., a duplicate) and arr[i - 1] has
             * not been used (!visited[i - 1]), it means we are at the same level of
             * recursion and should skip arr[i] to avoid generating a duplicate permutation.
             * (visited[i - 1] is false because we have already backtracked and unvisited it, meaning we already explored the subtree for arr[i - 1] at this level.)
             * If arr[i] is the same as arr[i - 1] (i.e., a duplicate) and arr[i - 1] has
             * been used (visited[i - 1]==true) it means we are at different level of
             * recursion and can proceed with a duplicate element as it generates a new
             * permutation different from those generated at the same level as arr[i - 1].
             */
            if (i > 0 && arr[i - 1] == arr[i] && !visited[i - 1]) {
                continue;
            }

            if (!visited[i]) {
                visited[i] = true;
                permutation.append(arr[i]);
                findUniquePermutations(arr, permutation, visited);
                permutation.setLength(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }
}


//Method 2

//Naive implementation 

class Solution {
    // Set to store only unique permutations (avoids duplicates automatically)
    private Set<String> uniquePermutations;

    public ArrayList<String> findPermutation(String str) {
        uniquePermutations = new HashSet<>();
        findPermutations(str.toCharArray(), 0);
        // Convert set to list before returning
        return new ArrayList<>(uniquePermutations);
    }

    private void findPermutations(char[] arr, int index) {
        if (index == arr.length) {
            uniquePermutations.add(new String(arr));
            return;
        }

        for (int i = index; i < arr.length; i++) {
            swap(arr, index, i);
            findPermutations(arr, index + 1);
            swap(arr, index, i);
        }
    }

    private void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Optimal implementation

/*
Purpose of sorting :
Sorting is used to bring duplicate elements together, so adjacent duplicates can be easily identified and skipped during permutation generation.

Why sorting and then skipping won't work here ?

Because we are manipulating the input array itself to form the permutation which involves swapping. If you sort the array and then swap elements, the order of elements is modified,the array is no longer in its sorted order, which invalidates the duplicate-checking logic (arr[i] == arr[i - 1]) that assumes adjacent duplicates.
*/

class Solution {
    private ArrayList<String> uniquePermutations;

    public ArrayList<String> findPermutation(String str) {
        uniquePermutations = new ArrayList<>();
        findUniquePermutations(str.toCharArray(), 0);
        return uniquePermutations;
    }

    private void findUniquePermutations(char[] arr, int index) {
        if (index == arr.length) {
            uniquePermutations.add(new String(arr));
            return;
        }

        // To keep track of elements used at the current level of recursion
        boolean[] used = new boolean[128];

        for (int i = index; i < arr.length; i++) {
            if (used[arr[i]]) {
                continue; // Skip duplicates
            }

            used[arr[i]] = true;
            swap(arr, index, i);
            findUniquePermutations(arr, index + 1);
            swap(arr, index, i);
        }
    }

    private void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
