/*

# Understanding Permutations

The term nPr refers to the number of permutations of n distinct objects taken r at a time. It is mathematically represented by the formula:
nPr= n! / (n−r)!

When discussing permutations of an array, the terms n and r in the context of nPr can be defined as follows:

n: This represents the total number of distinct elements in the array.
r: This represents the number of elements you want to arrange.

Case 1: Permutations of All Elements

If you want to find the permutations of all elements in a array of length n, then you would set:

r = n, In this case, the formula simplifies to:

nPn = n! / (n - n)! = n!

This means you are calculating all possible arrangements of the entire array.

### Example

For an array of size 3, say [a, b, c], the permutations are:

- [a, b, c]
- [a, c, b]
- [b, a, c]
- [b, c, a]
- [c, a, b]
- [c, b, a]

There are 3! = 6 permutations in total, which matches 3P3.


Case 2: Permutations of a Subset of Elements

If you want to find permutations where you only arrange a subset of elements (say r elements from the array), then you would set:

In this case, you would use:
nPr= n! / (n−r)!

### Example

For an array [a, b, c, d] (size 4) and r = 2 (i.e., we are choosing 2 elements at a time), the possible permutations of 2 elements are:

- [a, b]
- [a, c]
- [a, d]
- [b, a]
- [b, c]
- [b, d]
- [c, a]
- [c, b]
- [c, d]
- [d, a]
- [d, b]
- [d, c]

There are 4P2 = 4! / (4 - 2)! = 4! / 2! = (4 × 3 × 2 × 1) / (2 × 1) = 12 permutations in total.
*/

### Additional Information

- Unlike combinations, where the order does not matter, in permutations, different orders of the same items are counted as different arrangements.
  For example, if you select 2 letters from the set {A, B, C}, the arrangements AB and BA are considered different.
*/

// Method 1

class Solution {
    // This list will collect all the permutations
    private List<List<Integer>> permutations;

    public List<List<Integer>> permute(int[] arr) {
        permutations = new ArrayList<>();
        // Start backtracking with empty permutation and all elements unvisited
        findPermutations(arr, new ArrayList<>(), new boolean[arr.length]);
        return permutations;
    }

    private void findPermutations(int[] arr, List<Integer> currentPermutation, boolean[] visited) {
        // Base case: if we have selected numbers equal to array length, one full permutation is ready
        if (currentPermutation.size() == arr.length) {
            permutations.add(new ArrayList<>(currentPermutation)); // store deep copy
            return;
        }

        /**
         *  For every position in the permutation, we have the option to put any of the unused numbers.
         *  So we try each number that has not been used yet and recursively build permutations.
         */
        for (int i = 0; i < arr.length; i++) {
            if (!visited[i]) {
                // Mark the current element as used
                visited[i] = true;

                // Add the current element to the currentPermutation
                currentPermutation.add(arr[i]);

                // Recur to place next element
                findPermutations(arr, currentPermutation, visited);

                // Backtrack: remove the element and mark it as unused again
                currentPermutation.remove(currentPermutation.size() - 1);
                visited[i] = false;
            }
        }
    }
}


//Method 2
/*

[1, 2, 3]  (index = 0)
|
|-- swap(0,0) -> [1, 2, 3]
|   |
|   |-- swap(1,1) -> [1, 2, 3]
|   |   |
|   |   |-- swap(2,2) -> [1, 2, 3] ✅
|   |
|   |-- swap(1,2) -> [1, 3, 2]
|       |
|       |-- swap(2,2) -> [1, 3, 2] ✅
|
|-- swap(0,1) -> [2, 1, 3]
|   |
|   |-- swap(1,1) -> [2, 1, 3]
|   |   |
|   |   |-- swap(2,2) -> [2, 1, 3] ✅
|   |
|   |-- swap(1,2) -> [2, 3, 1]
|       |
|       |-- swap(2,2) -> [2, 3, 1] ✅
|
|-- swap(0,2) -> [3, 2, 1]
    |
    |-- swap(1,1) -> [3, 2, 1]
    |   |
    |   |-- swap(2,2) -> [3, 2, 1] ✅
    |
    |-- swap(1,2) -> [3, 1, 2]
        |
        |-- swap(2,2) -> [3, 1, 2] ✅

*/

class Solution {
    private List<List<Integer>> permutations;

    public List<List<Integer>> permute(int[] arr) {
        permutations = new ArrayList<>();
        findPermutations(arr, 0); // Start generating permutations from index 0
        return permutations;
    }

    private void findPermutations(int[] arr, int index) {
        // Base case: if the current index reaches the end, we have a complete permutation
        if (index == arr.length) {
            List<Integer> permutation = Arrays.stream(arr).boxed().collect(Collectors.toList());
            permutations.add(permutation); // Add the current permutation to the result list
            return;
        }

        /* 
           Swap the value at current index with each value (starting from itself) 
           present at subsequent indexes and afterwards fix the current index 
           and perform the same for the upcoming indexes
        */
        for (int i = index; i < arr.length; i++) {
            swap(arr, index, i); // Swap current element with the i-th element
            findPermutations(arr, index + 1); // Fix this index and move to the next index
            swap(arr, index, i); // Backtrack: undo the swap to restore the original state
        }
    }

    private void swap(int[] arr, int i, int j) {
        // Utility method to swap elements at index i and j
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
