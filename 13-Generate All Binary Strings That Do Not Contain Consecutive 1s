/*
How many binary strings of length 'n' is possible ?

OR

Given an array of size 'n', find the number of ways to fill the entire array such that each position in the array can contain either '0' or '1'.


The total number of binary strings of length 'n' is 2 ^ n .
Each position in the binary string can either be '0' or '1', giving us two choices per position. 
For 'n' positions, the total number of combinations is 2 raised to the power of n.

To Recap:

If n=1, the possible strings are: "0", "1" (Total: 2 ^ 1 = 2)
If n=2, the possible strings are: "00", "01", "10", "11" (Total: 2 ^ 2 = 4)
If n=3, the possible strings are: "000", "001", "010", "011", "100", "101", "110", "111" (Total: 2 ^ 3 = 8)
*/

//Bruteforce Approach

class Solution {
    public List<String> generateBinaryStrings(int n) {
        List<String> nLengthValidBinaryStrings = new ArrayList<>();

        // Total number of binary strings of length 'n' is 2^n
        int totalNLengthBinaryStrings = 1 << n; // Same as 2^n

        // Character array used to build each binary string
        char[] binaryString = new char[n];

        // Iterate over all numbers from 0 to 2^n - 1
        for (int num = 0; num < totalNLengthBinaryStrings; num++) {

            /*
             * Construct binary representation of 'num'
             * We check each bit from the least significant to the most significant.
             * 'i' ranges from 0 to n-1 and we fill from right to left (n - 1 - i)
             */
            for (int i = 0; i < n; i++) {
                // If the i-th bit is set, place '1', otherwise place '0'
                if ((num & (1 << i)) != 0) {
                    binaryString[n - 1 - i] = '1';
                } else {
                    binaryString[n - 1 - i] = '0';
                }
            }

            String nLengthBinaryString = new String(binaryString);

            /*
             * Filter condition: Only add binary strings that do NOT contain "11"
             * This ensures no two '1's are adjacent
             */
            if (!nLengthBinaryString.contains("11")) {
                nLengthValidBinaryStrings.add(nLengthBinaryString);
            }
        }

        // Return the list of all valid binary strings
        return nLengthValidBinaryStrings;
    }
}


//Aliter

class Solution {
   private List<String>validNLengthBinaryStrings;
   
   public List<String> generateBinaryStrings(int n) {
      validNLengthBinaryStrings=new ArrayList<>();
      generateAllValidNLengthBinaryStrings(new char[n],0);
      return validNLengthBinaryStrings;
   }
  
    private void generateAllValidNLengthBinaryStrings(char[] binaryString, int index) {
        if (index == binaryString.length) {
            String nLengthBinaryString=new String(binaryString);
            if(!nLengthBinaryString.contains("11")){
               validNLengthBinaryStrings.add(nLengthBinaryString);
            }
            return;
        }

        binaryString[index] = '0';
        generateAllValidNLengthBinaryStrings(binaryString, index + 1);

        binaryString[index] = '1';
        generateAllValidNLengthBinaryStrings(binaryString, index + 1);
    }
}



//Optimal Approach

class Solution {
    // List to store all valid binary strings of length 'n' that do not contain "11"
    private List<String> validNLengthBinaryStrings;

    public List<String> generateBinaryStrings(int n) {
        validNLengthBinaryStrings = new ArrayList<>();

        // Start building the binary string using a char array for efficiency
        generateAllValidNLengthBinaryStrings(new char[n], 0, false);
        return validNLengthBinaryStrings;
    }

    private void generateAllValidNLengthBinaryStrings(char[] binaryString, int index, boolean wasLastBit1) {
        // Base Case: If we've filled all positions, add it to the list
        if (index == binaryString.length) {
            validNLengthBinaryStrings.add(new String(binaryString));
            return;
        }

        // Always allowed: Place '0' at current index
        binaryString[index] = '0';
        generateAllValidNLengthBinaryStrings(binaryString, index + 1, false); // Reset wasLastBit1 to false

        /*
         * Only allowed if last bit was not '1':
         * Place '1' at current index only if previous bit was not '1'
         * This avoids consecutive '1's ("11")
         */
        if (!wasLastBit1) {
            binaryString[index] = '1';
            generateAllValidNLengthBinaryStrings(binaryString, index + 1, true); // Mark current bit as '1'
        }
    }
}
