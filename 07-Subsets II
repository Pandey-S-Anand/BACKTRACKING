/*
What if we dont sort the subset before including in the result ?

Ex: arr[]= [4,4,4,1,4]

[]

[4]

[4]      //Not Included Because Already Present
[4, 4]

[4].    //Not Included Because Already Present
[4, 4]  //Not Included Because Already Present
[4, 4, 4]

[1]
[4, 1]
[4, 4, 1]
[4, 4, 4 ,1]

[4]         //Not Included Because Already Present
[4 , 4]    //Not Included Because Already Present
[4, 4, 4]  //Not Included Because Already Present
[4, 4, 4, 4]
[1, 4]
[4, 1, 4]
[4, 4, 1, 4]
[4, 4, 4, 1, 4]

(On observation : [1, 4] , [4, 1, 4] and  [4, 4, 1, 4] are duplicate subsets)
*/


//Iterative 

//Method 1

//Naive Implementation 

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] arr) {
        Set<List<Integer>> subsets = new HashSet<>();
        subsets.add(new ArrayList<>());
        List<List<Integer>> tempList = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            for (List<Integer> subset : subsets) {
                List<Integer> newSubset = new ArrayList<>(subset);
                newSubset.add(arr[i]);

                Collections.sort(newSubset);
                tempList.add(newSubset);
            }
            subsets.addAll(tempList);
            tempList.clear();
        }

        return new ArrayList<>(subsets);
    }
}


//Optimal Implementation

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] arr) {
        Set<List<Integer>> subsets = new HashSet<>();
        subsets.add(new ArrayList<>());
        List<List<Integer>> tempList = new ArrayList<>();

        // If array is sorted,the generated subsets will also be in sorted order
        Arrays.sort(arr);

        for (int i = 0; i < arr.length; i++) {
            for (List<Integer> subset : subsets) {
                List<Integer> newSubset = new ArrayList<>(subset);
                newSubset.add(arr[i]);

                tempList.add(newSubset);
            }
            subsets.addAll(tempList);
            tempList.clear();
        }

        return new ArrayList<>(subsets);
    }
}


//Method 2 (Using Bit Manipulation)

//Naive Implementation 

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] arr) {
        Set<List<Integer>> uniqueSubsets = new HashSet<>();
        List<Integer> currentSubset = new ArrayList<>();
        int totalSubsets = 1 << arr.length;

        for (int num = 0; num < totalSubsets; num++) {
            for (int i = 0; i < arr.length; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubset.add(arr[i]);
                }
            }

            List<Integer> newSubset = new ArrayList<>(currentSubset);
            Collections.sort(newSubset);

            uniqueSubsets.add(newSubset);
            currentSubset.clear();
        }

        return new ArrayList<>(uniqueSubsets);
    }
}


//Optimal Implementation

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] arr) {
        Set<List<Integer>> uniqueSubsets = new HashSet<>();
        List<Integer> currentSubset = new ArrayList<>();
        int totalSubsets = 1 << arr.length;
        Arrays.sort(arr);

        for (int num = 0; num < totalSubsets; num++) {
            for (int i = 0; i < arr.length; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubset.add(arr[i]);
                }
            }

            uniqueSubsets.add(new ArrayList<>(currentSubset));
            currentSubset.clear();
        }

        return new ArrayList<>(uniqueSubsets);
    }
}


//Recursive Approach

//Method 1

//Naive Implementation

class Solution {
    private Set<List<Integer>> uniqueSubsets;

    public List<List<Integer>> subsetsWithDup(int[] arr) {
        uniqueSubsets = new HashSet<>();
        generateUniqueSubsets(arr, 0, new ArrayList<>());
        return new ArrayList<>(uniqueSubsets);
    }

    private void generateUniqueSubsets(int[] arr, int index, List<Integer> currentSubset) {
        if (index == arr.length) {
            List<Integer> newSubset = new ArrayList<>(currentSubset);
            Collections.sort(newSubset);
            uniqueSubsets.add(newSubset);
            return;
        }

        currentSubset.add(arr[index]);
        generateUniqueSubsets(arr, index + 1, currentSubset);
        currentSubset.remove(currentSubset.size() - 1);
        generateUniqueSubsets(arr, index + 1, currentSubset);
    }
}

//Better Implementation

/*
Given array= [1, 2, 3, 2]

Recursive Tree (No Duplicate Skipping):

[]
|(index=0)
├── [1] // Include 1
|   |(index=1)
│   ├── [1, 2] // Include 2
|   |   |(index=2)
│   │   ├── [1, 2, 3] // Include 3
|   |   |   |(index=3)
│   │   │   ├── [1, 2, 3, 2] // Include 2
|   |   |   |
│   │   │   └── [1, 2, 3] // Exclude 2
|   |   |
│   │   └── [1, 2] // Exclude 3
|   |       |(index=3)
│   │       ├── [1, 2, 2] // Include 2
|   |       |
│   │       └── [1, 2] // Exclude 2
|   |
│   └── [1] // Exclude 2
|       |(index=2)
│       ├── [1, 3] // Include 3
|       |   |(index=3)
│       │   ├── [1, 3, 2] // Include 2
|       |   |
│       │   └── [1, 3] // Exclude 2
|       |
│       └── [1] // Exclude 3
|           |(index=3)
│           ├── [1, 2] // Include 2
|           |  
│           └── [1] // Exclude 2
|
|
└── [] // Exclude 1
    |(index=1)
    ├── [2] // Include 2
    |   |(index=2)
    │   ├── [2, 3] // Include 3
    |   |   |(index=3)
    │   │   ├── [2, 3, 2] // Include 2
    |   |   |
    │   │   └── [2, 3] // Exclude 2
    |   |
    │   └── [2] // Exclude 3
    |       |(index=3)
    │       ├── [2, 2] // Include 2
    |       |
    │       └── [2] // Exclude 2
    |
    |
    └── [] // Exclude 2
        |(index=2)
        ├── [3] // Include 3
        |   |(index=3)
        │   ├── [3, 2] // Include 2
        |   |
        │   └── [3] // Exclude 2
        |
        |
        └── [] // Exclude 3
            |(index=3)
            ├── [2] // Include 2
            │   
            └── [] // Exclude 2

All Subsets : [[1,2,3,2],[1,2,3],[1,2,2],[1,2],[1,3,2],[1,3],[1,2],[1],[2,3,2],[2,3],[2,2],[2],[3,2],[3],[2],[]]
Duplicate subsets : [1, 3, 2] ,[1, 2] , [3, 2] and [2]
*/

class Solution {
    private Set<List<Integer>> uniqueSubsets;

    public List<List<Integer>> subsetsWithDup(int[] arr) {
        uniqueSubsets = new HashSet<>();
        Arrays.sort(arr);
        generateUniqueSubsets(arr, 0, new ArrayList<>());
        return new ArrayList<>(uniqueSubsets);
    }

    private void generateUniqueSubsets(int[] arr, int index, List<Integer> currentSubset) {
        if (index == arr.length) {
            uniqueSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        currentSubset.add(arr[index]);
        generateUniqueSubsets(arr, index + 1, currentSubset);
        currentSubset.remove(currentSubset.size() - 1);
        generateUniqueSubsets(arr, index + 1, currentSubset);
    }
}


/*
Given Array : [1, 2, 3, 2]
sorted array : {1, 2, 2, 3}

[]
|(index = 0)
├── [1] // Include 1. 
|   | (index=1)
│   ├── [1, 2] // Include 2  
|   |   | (index=2)
│   │   ├── [1, 2, 2] 
|   |   |   |(index=3)
│   │   │   ├── [1, 2, 2, 3] // Include 3 
|   |   |   |   //Nothing to skip
│   │   │   └── [1, 2, 2] // Exclude 3
|   |   |   //Nothing to skip
│   │   └── [1, 2] // Exclude 2. 
|   |       |(index=3)
│   │       ├── [1, 2, 3] // Include 3
|   |       |   //Nothing to skip
│   │       └── [1, 2] // Exclude 3
|   |
|   |   //Skip 2
│   └── [1] // Exclude 2
|       |(index=3)
│       ├── [1, 3] // Include 3  
|       |  //Nothing to skip
│       └── [1] // Exclude 3
|
|   //Nothing to skip
└── [] // Exclude 1
    |(index = 1)
    ├── [2] // Include 2
    |   |(index=2)
    │   ├── [2, 2] // Include 2
    |   |   |(index=3)
    │   │   ├── [2, 2, 3] // Include 3
    |   |   | //Nothing to skip
    │   │   └── [2, 2] // Exclude 3
    |   |   //Nothing to skip
    │   └── [2] // Exclude 2
    |       |(index =3)
    │       ├── [2, 3] // Include 3
    |       | //Nothing to skip
    │       └── [2] // Exclude 3
    |
    |   //Skip 2
    └── [] // Exclude 2
        |(index=3)
        ├── [3] // Include 3
        │ //Nothing to skip   
        └── [] // Exclude 3


 All subsets : [[1,2,2,3], [1,2,2], [1,2,3], [1,2], [1,3], [1], [2,2,3], [2,2], [2,3], [2], [3], []]
*/

//Optimal Implementation

class Solution {
    private List<List<Integer>> uniqueSubsets;

    public List<List<Integer>> subsetsWithDup(int[] arr) {
        uniqueSubsets = new ArrayList<>();
        Arrays.sort(arr);
        generateUniqueSubsets(arr, 0, new ArrayList<>());
        return uniqueSubsets;
    }

    private void generateUniqueSubsets(int[] arr, int index, List<Integer> currentSubset) {
        if (index == arr.length) {
            uniqueSubsets.add(new ArrayList<>(currentSubset));
            return;
        }

        currentSubset.add(arr[index]);
        generateUniqueSubsets(arr, index + 1, currentSubset);
        currentSubset.remove(currentSubset.size() - 1);
        while (index < arr.length - 1 && arr[index] == arr[index + 1]) {
            index++;
        }
        generateUniqueSubsets(arr, index + 1, currentSubset);
    }
}


//Method 2

//Naive Implementation

class Solution {
    private Set<List<Integer>> uniqueSubsets;

    public List<List<Integer>> subsetsWithDup(int[] arr) {
        uniqueSubsets = new HashSet<>();
        generateUniqueSubsets(arr, 0, new ArrayList<>());
        return new ArrayList<>(uniqueSubsets);
    }

    private void generateUniqueSubsets(int[] arr, int index, List<Integer> currentSubset) {
        List<Integer> newSubset = new ArrayList<>(currentSubset);
        Collections.sort(newSubset);
        uniqueSubsets.add(new ArrayList<>(newSubset));

        for (int i = index; i < arr.length; i++) {
            currentSubset.add(arr[i]);
            generateUniqueSubsets(arr, i + 1, currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}


//Improved Implementation

class Solution {
    private Set<List<Integer>> uniqueSubsets;

    public List<List<Integer>> subsetsWithDup(int[] arr) {
        uniqueSubsets = new HashSet<>();
        Arrays.sort(arr);
        generateUniqueSubsets(arr, 0, new ArrayList<>());
        return new ArrayList<>(uniqueSubsets);
    }

    private void generateUniqueSubsets(int[] arr, int index, List<Integer> currentSubset) {
        uniqueSubsets.add(new ArrayList<>(currentSubset));

        for (int i = index; i < arr.length; i++) {
            currentSubset.add(arr[i]);
            generateUniqueSubsets(arr, i + 1, currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}


//Better Implementation

class Solution {
    private List<List<Integer>> uniqueSubsets;

    public List<List<Integer>> subsetsWithDup(int[] arr) {
        uniqueSubsets = new ArrayList<>();
        Arrays.sort(arr);
        generateUniqueSubsets(arr, 0, new ArrayList<>());
        return uniqueSubsets;
    }

    private void generateUniqueSubsets(int[] arr, int index, List<Integer> currentSubset) {
        uniqueSubsets.add(new ArrayList<>(currentSubset));

        Set<Integer> used = new HashSet<>();
        for (int i = index; i < arr.length; i++) {
            // Skip duplicates
            if (used.contains(arr[i])) {
                continue;
            }
            used.add(arr[i]);
            currentSubset.add(arr[i]);
            generateUniqueSubsets(arr, i + 1, currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}

//Optimal Implementation

class Solution {
    private List<List<Integer>> uniqueSubsets;

    public List<List<Integer>> subsetsWithDup(int[] arr) {
        uniqueSubsets = new ArrayList<>();
        Arrays.sort(arr);
        generateUniqueSubsets(arr, 0, new ArrayList<>());
        return uniqueSubsets;
    }

    private void generateUniqueSubsets(int[] arr, int index, List<Integer> currentSubset) {
        uniqueSubsets.add(new ArrayList<>(currentSubset));

        for (int i = index; i < arr.length; i++) {
            if (i > index && arr[i] == arr[i - 1]) {
                continue;
            }
            currentSubset.add(arr[i]);
            generateUniqueSubsets(arr, i + 1, currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
    }
}
