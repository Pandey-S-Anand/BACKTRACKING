//Method 1

class Solution {
    // Stores all combinations that meet the size K and target sum constraints
    private List<List<Integer>> sizeKTargetSumCombinations;

    public List<List<Integer>> combinationSum3(int k, int n) {
        sizeKTargetSumCombinations = new ArrayList<>();

        // Start recursive backtracking from number 1 to 9
        generateSizeKTargetSumCombinations(1, k, n, new ArrayList<>());

        return sizeKTargetSumCombinations;
    }

    private void generateSizeKTargetSumCombinations(int currentNumber, int targetSize, int targetSum, List<Integer> combination) {
        //If we have selected exactly 'targetSize' numbers and the remaining targetSum is 0, then the current combination is valid.
        if (combination.size() == targetSize && targetSum == 0) {
            sizeKTargetSumCombinations.add(new ArrayList<>(combination));
            return;
        }

        /*
         * Pruning / Early Exit Conditions:
         *
         * 1. If currentNumber > 9:
         *    - Only digits from 1 to 9 are allowed, so we cannot proceed further.
         *
         * 2. If currentNumber > targetSum:
         *    - Since numbers are positive and increasing, including this number would exceed the target sum.
         *
         * 3. If combination.size() == targetSize but targetSum != 0:
         *    - We have already picked 'targetSize' numbers, but they do not sum up to the desired total.
         *    - This path is invalid and should be pruned.
         */

        if (currentNumber > 9 || currentNumber > targetSum || combination.size() == targetSize) {
            return;
        }

        // Include current number in the combination
        combination.add(currentNumber);

        // Move to the next number (as each number can be used only once)
        generateSizeKTargetSumCombinations(currentNumber + 1, targetSize, targetSum - currentNumber, combination);

        // Backtrack by removing the current number
        combination.remove(combination.size() - 1);

        // Exclude the current number and explore further options
        generateSizeKTargetSumCombinations(currentNumber + 1, targetSize, targetSum, combination);
    }
}



//Method 2

class Solution {
    private List<List<Integer>> sizeKTargetSumCombinations;

    public List<List<Integer>> combinationSum3(int k, int n) {
        sizeKTargetSumCombinations = new ArrayList<>();
        generateSizeKTargetSumCombinations(1, k, n, new ArrayList<>());
        return sizeKTargetSumCombinations;
    }

    private void generateSizeKTargetSumCombinations(int currentNumber, int targetSize, int targetSum, List<Integer> combination) {
        //If we have selected exactly 'targetSize' numbers and the remaining targetSum is 0, then the current combination is valid.
        if (combination.size() == targetSize && targetSum == 0) {
            sizeKTargetSumCombinations.add(new ArrayList<>(combination));
            return;
        }

        for (int num = currentNumber; num <= 9; num++) {
            /*
             * Pruning / Early Exit Conditions:
             *
             * 1. If currentNumber > targetSum:
             *    - Since the numbers are in increasing order, if the current number exceeds
             *      the targetSum, all subsequent numbers will also be larger.
             *    - Hence, there is no point in exploring further down this path.
             *
             * 2. If combination.size() == targetSize but targetSum != 0:
             *    - We have already picked 'targetSize' numbers, but their sum does not match the target.
             *    - This combination is invalid and should be pruned.
             */
            if (num > targetSum || combination.size() == targetSize) {
                break;
            }
            combination.add(num);
            generateSizeKTargetSumCombinations(num + 1, targetSize, targetSum - num, combination);
            combination.remove(combination.size() - 1);
        }
    }
}
