//Bruteforce Approach

class Solution {
    // List to store all unique palindrome permutations
    private List<String> uniquePalindromePermutations;

    public List<String> all_palindromes(String str) {
        char[] arr = str.toCharArray();
        Arrays.sort(arr);
        uniquePalindromePermutations = new ArrayList<>();

        findUniquePalindromePermutations(arr, new StringBuilder(), new boolean[str.length()]);
        return uniquePalindromePermutations;
    }

    private void findUniquePalindromePermutations(char[] arr, StringBuilder permutation, boolean[] visited) {
        // Base case: if the current permutation is complete
        if (permutation.length() == arr.length) {
            // Check if it's a palindrome and add to result list if true
            if (isPalindrome(permutation)) {
                uniquePalindromePermutations.add(permutation.toString());
            }
            return;
        }

        for (int i = 0; i < arr.length; i++) {
            if (i > 0 && arr[i] == arr[i - 1] && !visited[i - 1]) {
                continue;
            }

            if (!visited[i]) {
                visited[i] = true; 
                permutation.append(arr[i]); 
                findUniquePalindromePermutations(arr, permutation, visited);
                permutation.setLength(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }

    private boolean isPalindrome(StringBuilder str) {
        int start = 0, end = str.length() - 1;

        while (start < end) {
            if (str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }

        return true;
    }
}



//Optimal Approach

/**
 * ===========================================================================================
 * PALINDROMIC PERMUTATION RULES & EXPLANATION
 * ===========================================================================================
 *
 * ✅ Condition for a string to have valid palindromic permutations:
 *
 * ───────────────────────────────────────────────────────────────────────────────
 * 1. If the length of the string is EVEN:
 *    - Every character must appear an EVEN number of times.
 *    - Reason: Palindromes mirror characters around their center.
 *      So characters must pair up symmetrically.
 *
 * 2. If the length of the string is ODD:
 *    - All characters must appear an EVEN number of times,
 *      EXCEPT for only ONE character, which can appear an ODD number of times.
 *    - That single odd-frequency character will be placed at the CENTER.
 *
 * 3. Common Rule:
 *    - If more than one character has an odd frequency → NO valid palindromic permutation.
 *
 * ───────────────────────────────────────────────────────────────────────────────
 * ✅ Examples:
 *    - "aabb"     → ✅ Valid → All characters appear even number of times.
 *    - "racecar"  → ✅ Valid → Only one odd-frequency character ('e').
 *    - "aabc"     → ❌ Invalid → More than one character with odd frequency.
 *
 *
 * ===========================================================================================
 * EXAMPLE DRY RUN: Input = "abbabccaa"
 * ===========================================================================================
 *
 * Step 1: Count frequency of each character:
 *   a → 4 (even)
 *   b → 3 (odd)
 *   c → 2 (even)
 *
 * ✅ Valid → Only 'b' has odd frequency → will go in the center.
 *
 * Step 2: Construct half of the palindrome using frequency / 2:
 *   a → take 2
 *   b → take 1
 *   c → take 1
 *
 *   Half string = "aabc"
 *
 * Step 3: Generate all unique permutations of "aabc":
 *   → [aabc, aacb, abac, abca, acab, acba,
 *      baac, baca, bcaa, caab, caba, cbaa]
 *
 * Step 4: Create full palindromes by mirroring and placing the middle character:
 *   → Full = [half] + "b" + [reverse(half)]
 *
 * Final output (all unique palindromic permutations of "abbabccaa"):
 *   - aabc + b + cbaa = aabcbcbaa
 *   - aacb + b + bcaa = aacbbbcaa
 *   - abac + b + caba = abacbcaba
 *   - abca + b + acba = abcabacba
 *   - acab + b + baca = acabbbaca
 *   - acba + b + abca = acbababca
 *   - baac + b + caab = baacbcaab
 *   - baca + b + acab = bacabacab
 *   - bcaa + b + aacb = bcaabaacb
 *   - caab + b + baac = caabbbaac
 *   - caba + b + abac = cabababac
 *   - cbaa + b + aabc = cbaabaabc
 *
 */

class Solution {

    /**
     * Helper class to encapsulate:
     *  - whether a palindromic permutation is valid,
     *  - what character (if any) goes in the middle,
     *  - and the half string used for generating permutations.
     */
    private static class PalindromeComponents {
        private boolean isValid;
        private String middle;
        private String half;

        PalindromeComponents(boolean isValid, String middle, String half) {
            this.isValid = isValid;
            this.middle = middle;
            this.half = half;
        }

        PalindromeComponents(boolean isValid) {
            this.isValid = isValid;
            this.middle = null;
            this.half = null;
        }
    }

    private List<String> palindromePermutations;

    public List<String> all_palindromes(String str) {
        palindromePermutations = new ArrayList<>();

        // Check if palindromic permutations are possible Also get the middle character and half string needed to form permutations
        PalindromeComponents palindromeComponents = getMiddleCharIfPalindromePossible(str);
        if (!palindromeComponents.isValid) {
            return palindromePermutations;  // No valid palindromic permutations possible
        }

        // Convert half string to char array and sort it
        // Sorting is required for duplicate handling in permutation generation
        char[] arr = palindromeComponents.half.toCharArray();
        Arrays.sort(arr);

        // Generate all unique permutations of the half and form complete palindromes
        findUniquePalindromePermutations(arr, new StringBuilder(), new boolean[arr.length], palindromeComponents.middle);

        return palindromePermutations;
    }


    private PalindromeComponents getMiddleCharIfPalindromePossible(String str) {
        int[] frequencyArray = new int[26];

        // Count the frequency of each character
        for (char c : str.toCharArray()) {
            frequencyArray[c - 'a']++;
        }

        boolean oddFound = false;
        String middleChar = "";
        StringBuilder half = new StringBuilder();

        for (int i = 0; i < 26; i++) {
            int frequency = frequencyArray[i];
            
            if(frequency == 0){
               continue;  
            }

            if (frequency % 2 != 0) {
                if (oddFound || str.length() % 2 == 0) {
                    return new PalindromeComponents(false); // Invalid condition
                }
                oddFound = true;
                middleChar = String.valueOf((char) (i + 'a'));
            }
            
            char ch = (char) (i + 'a');
            // For valid characters, add frequency / 2 copies to half string
            for (int j = 1; j <= frequency / 2; j++) {
                half.append(ch);
            }
        }

        // Return the constructed components
        return new PalindromeComponents(true, middleChar, half.toString());
    }

    private void findUniquePalindromePermutations(char[] arr, StringBuilder permutation, boolean[] visited, String middle) {
        // Base case: when a full permutation of the half string is formed
        if (permutation.length() == arr.length) {
              /* Form the full palindrome by appending:
              - the current half
              - the middle character (if any)
              - the reverse of the current half
              */
            String reversed = permutation.reverse().toString();
            permutation.reverse(); // Restore the original after reversal
            palindromePermutations.add(permutation.toString() + middle + reversed);
            return;
        }

        for (int i = 0; i < arr.length; i++) {
            if (i > 0 && arr[i] == arr[i - 1] && !visited[i - 1]) {
                continue;
            }

            if (!visited[i]) {
                visited[i] = true;
                permutation.append(arr[i]);
                findUniquePalindromePermutations(arr, permutation, visited, middle);
                permutation.deleteCharAt(permutation.length() - 1);
                visited[i] = false;
            }
        }
    }
}
