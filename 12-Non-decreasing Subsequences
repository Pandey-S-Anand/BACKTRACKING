//Bruteforce Approach

class Solution {
    public List<List<Integer>> findSubsequences(int[] arr) {
        List<List<Integer>> uniqueSubsequences = generateUniqueSubsequences(arr);
        List<List<Integer>> uniqueNonDecreasingSubsequences = new ArrayList<>();

        for (List<Integer> subsequence : uniqueSubsequences) {
            if (isNonDecreasingSubsequence(subsequence)) {
                uniqueNonDecreasingSubsequences.add(subsequence);
            }
        }

        return uniqueNonDecreasingSubsequences;
    }

    private List<List<Integer>> generateUniqueSubsequences(int[] arr) {
        List<List<Integer>> uniqueSubsequences = new ArrayList<>();
        uniqueSubsequences.add(new ArrayList<>()); // Start with the empty subsequence

        for (int val : arr) {
            int size = uniqueSubsequences.size();
            for (int i = 0; i < size; i++) {
                List<Integer> subsequence = new ArrayList<>(uniqueSubsequences.get(i));
                subsequence.add(val);
                if (!uniqueSubsequences.contains(subsequence)) {
                    uniqueSubsequences.add(subsequence);
                }
            }
        }

        return uniqueSubsequences;
    }

    private boolean isNonDecreasingSubsequence(List<Integer> subsequence) {
        if (subsequence.size() <= 1) {
            return false;
        }

        for (int i = 1; i < subsequence.size(); i++) {
            if (subsequence.get(i - 1) > subsequence.get(i)) {
                return false;
            }
        }

        return true;
    }
}


//Improved Approach

class Solution {
    public List<List<Integer>> findSubsequences(int[] arr) {
        Set<List<Integer>> uniqueNonDecreasingSubsequences = new HashSet<>();
        List<Integer> currentSubsequence = new ArrayList<>();
        int totalSubsequences = 1 << arr.length;

        for (int num = 0; num < totalSubsequences; num++) {
            for (int i = 0; i < arr.length; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubsequence.add(arr[i]);
                }
            }

            if (isNonDecreasingSubsequence(currentSubsequence)) {
                uniqueNonDecreasingSubsequences.add(new ArrayList<>(currentSubsequence));
            }
            currentSubsequence.clear();
        }

        return new ArrayList<>(uniqueNonDecreasingSubsequences);
    }

    private boolean isNonDecreasingSubsequence(List<Integer> subsequence) {
        if (subsequence.size() <= 1) {
            return false;
        }

        for (int i = 1; i < subsequence.size(); i++) {
            if (subsequence.get(i - 1) > subsequence.get(i)) {
                return false;
            }
        }

        return true;
    }
}


//Better Approach

//Recursive Tree

[]
├── Include 4: [4]
│   ├── Include 6: [4, 6]
│   │   ├── Include 7: [4, 6, 7]
│   │   │   ├── Include 7: [4, 6, 7, 7]
│   │   │   └── Exclude 7: [4, 6, 7]
│   │   └── Exclude 7: [4, 6]
│   │       ├── Include 7: [4, 6, 7]
│   │       └── Exclude 7: [4, 6]
│   └── Exclude 6: [4]
│       ├── Include 7: [4, 7]
│       │   ├── Include 7: [4, 7, 7]
│       │   └── Exclude 7: [4, 7]
│       └── Exclude 7: [4]
│           ├── Include 7: [4, 7]
│           └── Exclude 7: [4]
├── Exclude 4: []
    ├── Include 6: [6]
    │   ├── Include 7: [6, 7]
    │   │   ├── Include 7: [6, 7, 7]
    │   │   └── Exclude 7: [6, 7]
    │   └── Exclude 7: [6]
    │       ├── Include 7: [6, 7]
    │       └── Exclude 7: [6]
    └── Exclude 6: []
        ├── Include 7: [7]
        │   ├── Include 7: [7, 7]
        │   └── Exclude 7: [7]
        └── Exclude 7: []
            ├── Include 7: [7]
            └── Exclude 7: []

class Solution {
    Set<List<Integer>> increasingSubsequences;

    public List<List<Integer>> findSubsequences(int[] arr) {
        increasingSubsequences = new HashSet<>();
        generateIncreasingSubsequences(arr, 0, -1, new ArrayList<>());
        return new ArrayList<>(increasingSubsequences);
    }

    private void generateIncreasingSubsequences(int[] arr, int index, int lastIncludedIndex, List<Integer> currentSubsequence) {
        if (index == arr.length) {
            if (currentSubsequence.size() >1) {
                increasingSubsequences.add(new ArrayList<>(currentSubsequence));
            }
            return;
        }

        if (lastIncludedIndex == -1 || arr[lastIncludedIndex] <= arr[index]) {
            currentSubsequence.add(arr[index]);
            generateIncreasingSubsequences(arr, index + 1, index, currentSubsequence);
            currentSubsequence.remove(currentSubsequence.size() - 1);
        }

        generateIncreasingSubsequences(arr, index + 1, lastIncludedIndex, currentSubsequence);
    }
}


//Optimal Approach
//Logic : The duplication occurs when we exclude an element while the last included element is the same as the current element.

class Solution {
    List<List<Integer>> increasingSubsequences;

    public List<List<Integer>> findSubsequences(int[] arr) {
        increasingSubsequences = new ArrayList<>();
        generateIncreasingSubsequences(arr, 0, -1, new ArrayList<>());
        return new ArrayList<>(increasingSubsequences);
    }

    private void generateIncreasingSubsequences(int[] arr, int index, int lastIncludedIndex, List<Integer> currentSubsequence) {
        if (index == arr.length) {
            if (currentSubsequence.size() >1) {
                increasingSubsequences.add(new ArrayList<>(currentSubsequence));
            }
            return;
        }

        if (lastIncludedIndex == -1 || arr[lastIncludedIndex] <= arr[index]) {
            currentSubsequence.add(arr[index]);
            generateIncreasingSubsequences(arr, index + 1, index, currentSubsequence);
            currentSubsequence.remove(currentSubsequence.size() - 1);
        }

        if (lastIncludedIndex == -1 || arr[lastIncludedIndex] != arr[index]) { 
           generateIncreasingSubsequences(arr, index + 1, lastIncludedIndex, currentSubsequence);
        }
    }
}
